using System;
using UnityEngine;
using UnityEngine.InputSystem;

/// <summary>
/// Handles player input using Unity's Input System and provides events for various player actions.
/// </summary>
[CreateAssetMenu(fileName = "InputReader", menuName = "Scriptable Objects/InputReader")]
public class InputReader : ScriptableObject, InputSystem_Actions.IPlayerActions, IInputHandler, ISwitchPlayerMap
{
    private InputSystem_Actions inputActions; // Input actions generated by Unity's Input System.

    public event Action<Vector2> MoveEvent; // Event triggered when the player moves.
    public event Action<Vector2> LookEvent; // Event triggered when the player looks around.
    public event Action InteractEvent; // Event triggered when the player interacts.
    public event Action JumpEvent; // Event triggered when the player jumps.
    public event Action AttackEvent; // Event triggered when the player attacks.
    public event Action<bool> SprintEvent; // Event triggered when the player sprints.
    public event Action<bool> CrouchEvent; // Event triggered when the player crouches.
    public event Action<bool> DefenceEvent; // Event triggered when the player defends.

    /// <summary>
    /// Initializes the input system and sets up callbacks for player actions.
    /// </summary>
    public void InitializeInput()
    {
        if (inputActions == null)
        {
            inputActions = new InputSystem_Actions();
            inputActions.Player.SetCallbacks(this);
        }

        inputActions.Enable();
    }

    /// <summary>
    /// Disables the input system when the object is disabled.
    /// </summary>
    private void OnDisable()
    {
        if (inputActions != null)
        {
            inputActions.Disable();
            inputActions.Player.RemoveCallbacks(this);
            inputActions.Dispose();
        }
    }

    /// <summary>
    /// Handles movement input and triggers the MoveEvent.
    /// </summary>
    /// <param name="context">The input context for movement.</param>
    public void OnMove(InputAction.CallbackContext context)
    {
        if (context.performed)
        {
            MoveEvent?.Invoke(context.ReadValue<Vector2>());
        }
        else
        {
            MoveEvent?.Invoke(Vector2.zero);
        }
    }

    /// <summary>
    /// Handles look input and triggers the LookEvent.
    /// </summary>
    /// <param name="context">The input context for looking.</param>
    public void OnLook(InputAction.CallbackContext context)
    {
        if (context.performed)
        {
            LookEvent?.Invoke(context.ReadValue<Vector2>());
        }
        else
        {
            LookEvent?.Invoke(new Vector2(0, 0));
        }
    }

    /// <summary>
    /// Handles attack input and triggers the AttackEvent.
    /// </summary>
    /// <param name="context">The input context for attacking.</param>
    public void OnAttack(InputAction.CallbackContext context)
    {
        if (context.performed)
        {
            AttackEvent?.Invoke();
        }
    }

    /// <summary>
    /// Handles defence input and triggers the DefenceEvent.
    /// </summary>
    /// <param name="context">The input context for defending.</param>
    public void OnDefence(InputAction.CallbackContext context)
    {
        if (context.performed)
        {
            DefenceEvent?.Invoke(true);
        }
        else if (context.canceled)
        {
            DefenceEvent?.Invoke(false);
        }
    }

    /// <summary>
    /// Handles interaction input and triggers the InteractEvent.
    /// </summary>
    /// <param name="context">The input context for interacting.</param>
    public void OnInteract(InputAction.CallbackContext context)
    {
        if (context.performed)
        {
            InteractEvent?.Invoke();
        }
    }

    /// <summary>
    /// Handles crouch input and triggers the CrouchEvent.
    /// </summary>
    /// <param name="context">The input context for crouching.</param>
    public void OnCrouch(InputAction.CallbackContext context)
    {
        if (context.performed)
        {
            CrouchEvent?.Invoke(true);
        }
        else
        {
            CrouchEvent?.Invoke(false);
        }
    }

    /// <summary>
    /// Handles jump input and triggers the JumpEvent.
    /// </summary>
    /// <param name="context">The input context for jumping.</param>
    public void OnJump(InputAction.CallbackContext context)
    {
        if (context.performed)
        {
            JumpEvent?.Invoke();
        }
    }

    /// <summary>
    /// Handles sprint input and triggers the SprintEvent.
    /// </summary>
    /// <param name="context">The input context for sprinting.</param>
    public void OnSprint(InputAction.CallbackContext context)
    {
        if (context.performed)
        {
            SprintEvent?.Invoke(true);
        }
        else
        {
            SprintEvent?.Invoke(false);
        }
    }

    /// <summary>
    /// Simulates movement input (not implemented).
    /// </summary>
    /// <param name="movement">The movement vector to simulate.</param>
    public void SimulateMove(Vector2 movement)
    {
        throw new NotImplementedException();
    }

    /// <summary>
    /// Simulates interaction input (not implemented).
    /// </summary>
    public void SimulateInteract()
    {
        throw new NotImplementedException();
    }

    /// <summary>
    /// Simulates sprint input (not implemented).
    /// </summary>
    /// <param name="isSprinting">True if sprinting, false otherwise.</param>
    public void SimulateSprint(bool isSprinting)
    {
        throw new NotImplementedException();
    }

    /// <summary>
    /// Disables player controls by disabling the input actions.
    /// </summary>
    public void TurnOffPlayerControls()
    {
        inputActions.Player.Disable();
    }

    /// <summary>
    /// Enables player controls by enabling the input actions.
    /// </summary>
    public void TurnOnPlayerControls()
    {
        inputActions.Player.Enable();
    }
}